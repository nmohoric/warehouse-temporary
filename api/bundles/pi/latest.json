{"templates": {"token_reset": {"body": "~each var=$results~\n~if cond=$item.result == true~\n~attachment color=\"green\"~\nSuccessfully reset failcounter for all tokens belonging to ~$item.name~\n~end~\n~end~\n~if cond=$item.result == false~\n~attachment color=\"red\"~\nCould not reset all tokens for ~$item.name~\n~end~\n~end~\n~end~\n~attachment title=$task.name color=\"white\" footer=\"Pan-Net Infra Security\"~\n~end~\n"}, "token_list": {"body": "~each var=$results as=user~\n~if cond=$user.result == true~\n~if cond=length($user.tokens) == 0~\n~attachment title=$user.name color=\"black\"~\nNo token assigned for ~$user.name~\n~end~\n~end~\n~if cond=length($user.tokens) > 0~\n~each var=$user.tokens as=token~\n~if cond=$token.failcount >= 10~\n~attachment title=$user.name color=\"red\"~\n**Token Serial:** ~$token.serial~\n**Token Type**: ~$token.tokentype~\n**Fail Counter:** ~$token.failcount~/~$token.maxfail~\n~end~\n~end~\n~if cond=$token.failcount < 10~\n~attachment title=$user.name color=\"green\"~\n**Token Serial:** ~$token.serial~\n**Token Type**: ~$token.tokentype~\n**Fail Counter:** ~$token.failcount~/~$token.maxfail~\n~end~\n~end~\n~end~\n~end~\n~end~\n~if cond=$user.result == false~\n~attachment title=$user.name color=\"black\"~\nThe user was not found.\n~end~\n~end~\n~end~\n~attachment title=$task.name color=\"white\" footer=\"Example.org\"~\n~end~\n"}, "token_delete": {"body": "~each var=$results as=token~\n  ~if cond=$token.result == 0~\n    ~attachment title=$token.serial color=\"red\"~\nThe token was not deleted (Are you sure it exists?).\n    ~end~\n    ~end~\n  ~if cond=$token.result == 1~\n    ~attachment title=$token.serial color=\"green\"~\nToken deleted successfully.\n    ~end~\n  ~end~\n~end~\n~attachment title=$task.name color=\"white\" footer=\"Pan-Net Infra Security\"~\n~end~\n"}}, "commands": {"token-list": {"rules": ["when command is pi:token-list must have pi:read"], "executable": "/usr/bin/cog-command", "long_description": "List tokens for a user\n", "examples": "* List tokens for a given user\n\n    !pi:token-list <user> [<user> ...]\n", "description": "List token for a given user"}, "token-delete": {"rules": ["when command is pi:token-delete must have pi:admin"], "executable": "/usr/bin/cog-command", "long_description": "Delete a token based on serial\n", "examples": "* Delete a token based on serial\n\n    !pi:token-delete <serial> [<serial> ...]\n", "description": "Delete a token"}, "token-reset": {"rules": ["when command is pi:token-reset must have pi:write"], "executable": "/usr/bin/cog-command", "long_description": "Reset failcounter for all tokens of a user\n", "examples": "* Reset failcounter for all tokens of a user\n\n    !pi:token-reset <user>\n", "description": "Reset failcounter for all tokens of a user"}}, "description": "Manage privacyIDEA user resources and tokens", "name": "pi", "version": "0.2.7", "docker": {"image": "pannet/pi-bundle", "tag": "0.2.7"}, "cog_bundle_version": 4, "config": {"notes": "Make sure the privacyIDEA user set in the environment variables has the necessary rights.\n", "homepage": "https://github.com/pan-net-security/pi-bundle", "env": [{"var": "pi_fqdn", "description": "privacyIDEA FQDN (missing http schema will default to https)"}, {"var": "pi_username", "description": "privacyIDEA username"}, {"var": "pi_password", "description": "privacyIDEA user's password"}], "author": "Diogenes Santos de Jesus <diogenes.jesus@telekom.com>"}, "long_description": "This bundle provides commands for viewing and manipulating users and token  in privacyIDEA. Permissions are used to control which users are authorized to run each command.  Listing and searching for resources requires the pi:read permission.  Modifying the objects or other values of a resource requires the pi:write Some delete and revoke commands require pi:admin permission.\n", "permissions": ["pi:read", "pi:write", "pi:execute", "pi:admin"]}
