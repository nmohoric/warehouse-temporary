{"templates": {"preformatted": {"body": "```\n~$results[0].body~\n```\n"}, "fields": {"body": "**Fields:** ~join var=$results[0].fields~~$item~~end~\n"}}, "commands": {"head": {"rules": ["allow"], "executable": "/home/bundle/cog-command", "description": "Pass through only the first N results. Defaults to 10 results.\"", "arguments": "[count]"}, "table": {"executable": "/home/bundle/cog-command", "description": "Generate a table from pipeline output", "rules": ["allow"], "arguments": "field1 field2 ... fieldN", "documentation": "Each field is taken to be a key that should be extracted from an\ninput map.\n\nWhen the field is a string like \"foo\", this means \"select the\nvalue of the 'foo' key\".\n\nAlternatively, a path can be provided, as in \"foo.bar.baz\". This\nwill produce a column named \"baz\", with values found at that key\npath. For instance, when run on the object\n\n  {\"foo\": {\"bar\": {\"baz\": \"hello world\"}}}\n\nthe string \"foo.bar.baz\" will extract the value\n\"hello world\".\n\nFields may be renamed, as well. Passing a quoted string like\n\"foo=bar\" will produce a column labeled \"foo\", with the value of\nthe \"bar\" key. Paths can be renamed in the same way, if desired\n(e.g. \"foo=foo.bar.baz\"). Note that these pairs *must* be quoted\nto parse correctly.\n\nIf such a column name transformation will result in a duplicate\nname, the full keypath will be used instead.\n\nHowever, these conventions mean that this command may not\noperate well on fields that contain \"=\" or \".\" characters.\n", "examples": "seed '[{\"foo\": \"hello\", \"bar\": \"world\"},\n       {\"foo\": \"hola\", \"bar\": \"mundo\"}]'\n  | format:table foo bar\n+-------+-------+\n|  foo  |  bar  |\n+-------+-------+\n| hello | world |\n| hola  | mundo |\n+-------+-------+\n\nseed '[{\"foo\": \"hello\", \"bar\": \"world\"},\n       {\"foo\": \"hola\", \"bar\": \"mundo\"}]'\n  | format:table \"key=foo\" \"value=bar\"\n+-------+-------+\n|  key  | value |\n+-------+-------+\n| hello | world |\n| hola  | mundo |\n+-------+-------+\n\nseed '[{\"foo\": {\"greeting\": \"hello\", \"valediction\": \"good-bye\"}, \"bar\": \"world\"},\n       {\"foo\": {\"greeting\": \"hola\", \"valediction\": \"adios\"}, \"bar\": \"mundo\"}]'\n  | format:table foo.greeting bar\n\n+----------+-------+\n| greeting |  bar  |\n+----------+-------+\n| hello    | world |\n| hola     | mundo |\n+----------+-------+\n\nseed '[{\"foo\": {\"greeting\": \"hello\", \"valediction\": \"good-bye\"}, \"bar\": \"world\"},\n       {\"foo\": {\"greeting\": \"hola\", \"valediction\": \"adios\"}, \"bar\": \"mundo\"}]'\n  | format:table \"farwell=foo.valediction\" bar\n+----------+-------+\n| farwell  |  bar  |\n+----------+-------+\n| good-bye | world |\n| adios    | mundo |\n+----------+-------+\n\nseed '[{\"foo\": {\"bar\": \"inside\"}, \"bar\": \"outside\"},\n       {\"foo\": {\"bar\": \"also inside\"}, \"bar\": \"also outside\"}]'\n  | format:table bar foo.bar\n+--------------+-------------+\n|     bar      |   foo.bar   |\n+--------------+-------------+\n| outside      | inside      |\n| also outside | also inside |\n+--------------+-------------+\n"}, "fields": {"rules": ["allow"], "executable": "/home/bundle/cog-command", "description": "List the fields in an input object", "long_description": "Returns a sorted list of all the top-level keys in an input\nobject.\n\nReturns nothing if run without input (e.g., at the beginning of\na pipeline).\n"}, "list": {"rules": ["allow"], "executable": "/home/bundle/cog-command", "long_description": "Builds a string representation of a list of values from pipeline input\nwith each item separated by a customizable delimiter.\n", "options": {"join": {"short_flag": "j", "required": false, "type": "string", "description": "Delimiter to use between list items. Default is \", \""}, "order": {"short_flag": "o", "required": false, "type": "string", "description": "Sort order for list. Allowed values are: asc, desc"}}, "description": "Build list of values from pipeline input"}, "tail": {"rules": ["allow"], "executable": "/home/bundle/cog-command", "description": "Pass through only the last N results. Defaults to 10 results.", "arguments": "[count]"}, "pluck": {"rules": ["allow"], "arguments": "<path>", "executable": "/home/bundle/cog-command", "options": {"as": {"required": false, "type": "string", "description": "Return results in a field named with the value of this option"}}, "description": "Return a nested object from the input"}}, "version": "0.5.0", "description": "Pipeline output formatting utilities", "name": "format", "docker": {"image": "cogcmd/format", "tag": "0.5.0"}, "cog_bundle_version": 4}