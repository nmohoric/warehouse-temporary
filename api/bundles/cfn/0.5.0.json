{"templates": {"template_list": {"body": "**CloudFormation Templates:**\n~br~\n~each var=$results as=template~\n* ~$template.name~\n~end~\n"}, "defaults_list": {"body": "**CloudFormation Defaults:**\n\n~br~\n~each var=$results~\n* ~$item.name~\n~end~\n"}, "template_show": {"body": "**Template:** ~$results[0].name~\n**Description:** ~$results[0].description~\n~if cond=$results[0].capabilities bound?~**Capabilities:** ~$results[0].capabilities[0]~~end~\n\n~br~\n**Parameters:**\n\n~each var=$results[0].parameters~\n* ~$item.parameter_key~ (~$item.parameter_type~) ~if cond=$item.default_value != \"\"~[~$item.default_value~]~end~\n\n~end~\n"}, "stack_event_list": {"body": "**Stack Events:** ~$results[0].meta.stack_name~\n**Result Page:** ~$results[0].meta.page~\n\n| Timestamp | Status | Resource |\n|-----------|--------|----------|\n~each var=$results as=event~\n| ~$event.timestamp~ | ~$event.resource_status~ | ~$event.logical_resource_id~ |\n|                    |                          | ~$event.resource_type~       | \n~end~\n"}, "definition_list": {"body": "**CloudFormation Definitions:**\n\n| Name | Template | Defaults |\n|------|----------|----------|\n~each var=$results~\n| ~$item.name~ | ~$item.data.template.name~ | ~each var=$item.data.defaults as=defaults~~$defaults.name~ ~end~ |\n~end~\n"}, "stack_delete": {"body": "**Stack:** ~$results[0].stack_name~\n**Status:** ~$results[0].stack_status~\n"}, "definition_create": {"body": "~each var=$results as=definition~\nCreated definition ~$definition.name~\n~end~\n"}, "changeset_show": {"body": "~each var=$results as=changeset~\n\n**Changeset:** ~$changeset.change_set_name~\n**Stack:** ~$changeset.stack_name~\n~if cond=$changeset.description not_empty?~\n**Description:** ~$changeset.description~\n~end~\n~if cond=$changeset.capabilities not_empty?~\n**Capabilities:** ~$changeset.capabilities[0]~\n~end~\n**Status:** ~$changeset.status~\n**Timestamp:** ~$changeset.creation_time~\n\n~br~\n**Parameters:**\n\n~each var=$changeset.parameters as=param~\n~if cond=$param.parameter_value != \"\"~* ~$param.parameter_key~=~$param.parameter_value~~end~\n\n~end~\n\n~br~\n**Changes:**\n~if cond=$changeset.status != \"CREATE_COMPLETE\"~\nChangeset still creating. Check back for detailed changes.\n~end~\n~if cond=$changeset.status == \"CREATE_COMPLETE\"~\n~each var=$changeset.changes as=change~\n* ~$change.resource_change.logical_resource_id~ (~$change.resource_change.action~) ~if cond=$change.resource_change.replacement == \"True\"~_Replace_~end~\n\n~end~\n~end~\n\n~if cond=$changeset.tags not_empty?~\n~br~\n**Tags:**\n\n~each var=$changeset.tags as=tag~\n* ~$tag.key~=~$tag.value~\n~end~\n~end~\n\n~br~\nTo apply this changeset, run:\n\n```\ncfn:changeset-apply ~$changeset.change_set_name~ ~$changeset.stack_name~\n```\n~end~\n"}, "stack_resource_list": {"body": "**Stack Resources:** ~$results[0].meta.stack_name~\n**Page:** ~$results[0].meta.page~\n\n| Name | Status | Resource |\n|------|--------|----------|\n~each var=$results as=resource~\n| ~$resource.logical_resource_id~ |  ~$resource.resource_status~ | ~$resource.resource_type~        |\n|                                 |                              | ~$resource.physical_resource_id~ |\n~end~\n"}, "changeset_list": {"body": "**Changesets:** ~$results[0].stack_name~\n\n~br~\n~each var=$results as=changeset~\n* **~$changeset.change_set_name~:** ~$changeset.execution_status~ / ~$changeset.status~\n~if cond=$changeset.description bound?~\n      ~$changeset.description~\n~end~\n~end~\n"}, "changeset_missing_stack_name": {"body": "Error: Unable to list stacks."}, "template_body": {"body": "~json var=$results[0]~\n"}, "defaults_show": {"body": "**Defaults:** ~$results[0].meta.name~\n\n~br~\n**Params:**\n\n~if cond=$results[0].param_list empty?~\nNone\n~end~\n~each var=$results[0].param_list~\n* ~$item~\n~end~\n\n~br~\n**Tags:**\n\n~if cond=$results[0].tag_list empty?~\nNone\n~end~\n~each var=$results[0].tag_list~\n* ~$item~\n~end~\n"}, "error_stack_capability": {"body": "Insufficient capabilities to create stack ~$results[0].name~. Add `-c ~$results[0].capability~` to your stack-create options to proceed.\n"}, "stack_show": {"body": "**Stack:** ~$results[0].stack_name~\n**Description:** ~$results[0].description~\n**Stack Status:** ~$results[0].stack_status~\n~if cond=$results[0].last_updated_time not_empty?~**Last Update:** ~$results[0].last_updated_time~~end~\n\n~br~\n**Parameters:**\n\n~if cond=$results[0].parameters empty?~\nNone\n~end~\n~each var=$results[0].parameters~\n* ~$item.parameter_key~=~$item.parameter_value~\n\n~end~\n\n~br~\n**Outputs:**\n\n~if cond=$results[0].outputs empty?~\nNone\n~end~\n~each var=$results[0].outputs as=item~\n* ~$item.output_key~=~$item.output_value~\n\n~end~\n\n~br~\n**Tags:**\n\n~if cond=$results[0].tags empty?~\nNone\n~end~\n~each var=$results[0].tags as=item~\n* ~$item.key~=~$item.value~\n\n~end~\n"}, "stack_list": {"body": "**CloudFormation Stacks:**\n\n| Name | Status | Description |\n|------|--------|-------------|\n~each var=$results as=stack~\n| ~$stack.stack_name~ | ~$stack.stack_status~ | ~$stack.template_description~ |\n~end~\n"}, "defaults_create": {"body": "~each var=$results as=defaults~\nCreated defaults file ~$defaults.name~\n~end~\n"}, "check_setup": {"body": "~each var=$results as=setup~\n| Check | Success |\n| ----- | ------- |\n| Authentication with git server | ~if cond=$setup.git_auth == 1~yes~end~~if cond=$setup.git_auth == 0~no~end~ |\n| Git repository exists | ~if cond=$setup.git_repo_exists == 1~yes~end~~if cond=$setup.git_repo_exists == 0~no~end~ |\n| Git repository structured correctly | ~if cond=$setup.git_repo_structure == 1~yes~end~~if cond=$setup.git_repo_structure == 0~no~end~ |\n| Authentication with Amazon Web Services | ~if cond=$setup.aws_auth == 1~yes~end~~if cond=$setup.aws_auth == 0~no~end~ |\n| Cloudformation permissions | ~if cond=$setup.aws_cfn_permissions == 1~yes~end~~if cond=$setup.aws_cfn_permissions == 0~no~end~ |\n| S3 permissions | ~if cond=$setup.aws_s3_permissions == 1~yes~end~~if cond=$setup.aws_s3_permissions== 0~no~end~ |\n| S3 bucket exists | ~if cond=$setup.aws_s3_bucket == 1~yes~end~~if cond=$setup.aws_s3_bucket == 0~no~end~ |\n~end~\n"}, "definition_show": {"body": "**Definition:** ~$results[0].name~\n**Template:** ~$results[0].template.name~\n~if cond=$results[0].timestamp not_empty?~**Timestamp:** ~$results[0].timestamp~~end~\n\n# ----------------------------------------------------------------------------\n# Parameters\n# ----------------------------------------------------------------------------\n~if cond=$results[0].params not_empty?~\n~br~\n**Parameters:**\n\n~each var=$results[0].params~\n* ~$item~\n~end~\n~end~\n# ----------------------------------------------------------------------------\n# Tags\n# ----------------------------------------------------------------------------\n~if cond=$results[0].tags not_empty?~\n~br~\n**Tags:**\n\n~each var=$results[0].tags~\n* ~$item~\n~end~\n~end~\n# ----------------------------------------------------------------------------\n# Defaults\n# ----------------------------------------------------------------------------\n~if cond=$results[0].defaults not_empty?~\n~br~\n**Defaults:**\n\n~each var=$results[0].defaults~\n* ~$item.name~\n~end~\n~end~\n# ----------------------------------------------------------------------------\n# Override Params\n# ----------------------------------------------------------------------------\n~if cond=$results[0].overrides.params not_empty?~\n~br~\n**Override Params:**\n\n~each var=$results[0].overrides.params~\n* ~$item~\n~end~\n~end~\n# ----------------------------------------------------------------------------\n# Override Tags\n# ----------------------------------------------------------------------------\n~if cond=$results[0].overrides.tags not_empty?~\n~br~\n**Override Tags:**\n\n~each var=$results[0].overrides.tags~\n* ~$item~\n~end~\n~end~\n# ----------------------------------------------------------------------------\n"}, "changeset_delete": {"body": "~each var=$results as=changeset~\nSuccessfully deleted changeset ~$changeset.changeset_name~ for stack ~$changeset.stack_name~.\n~end~\n"}}, "commands": {"definition-create": {"executable": "/home/bundle/cog-command", "options": {"params": {"short_flag": "p", "required": false, "type": "list", "description": "Stack parameters which override parameters defined in any defaults files specified. These should be provided as `<key>=<value>` strings."}, "defaults": {"short_flag": "d", "required": false, "type": "list", "description": "List of defaults files to use. Defaults are merged together in the order they were specified."}, "branch": {"short_flag": "b", "required": false, "type": "string", "description": "Branch from which to find defaults files. Defaults to master."}, "tags": {"short_flag": "t", "required": false, "type": "list", "description": "Stack tags which override tags defined in any defaults files specified. These should be provided as `<key>=<value>` strings."}}, "description": "Creates a stack definition.", "rules": ["when command is cfn:definition-create must have cfn:definition-create"], "arguments": "<definition-name> <template-name>", "long_description": "Definitions are defined with a name, a template, a set of defaults files, and a set of overrides (tags and parameters). These layers are then all merged together in the above order and stored in the defined git repository for use with the `stack-create` command.", "examples": "Creating a simple definition without overrides:\ndefinition create webapp-prod webapp\n\nCreating a definition with a few overrides:\ndefinition create webapp-staging webapp -p \"Port=8080\" -p \"InstanceType=t2.medium\" -t \"Env=staging\"\n"}, "changeset-apply": {"rules": ["when command is cfn:changeset-apply must have cfn:changeset"], "executable": "/home/bundle/cog-command", "description": "Applies a cloudformation changeset.", "arguments": "<changeset-name> <stack-name>"}, "template-list": {"executable": "/home/bundle/cog-command", "options": {"sha": {"short_flag": "s", "required": false, "type": "string", "description": "Git commit SHA from which to list templates."}, "tag": {"short_flag": "t", "required": false, "type": "string", "description": "Tag from which to list templates."}, "branch": {"short_flag": "b", "required": false, "type": "string", "description": "Branch from which to list templates. Defaults to master."}}, "description": "Lists all templates, filtered by an optional glob pattern.", "rules": ["when command is cfn:template-list allow"], "arguments": "[pattern]", "long_description": "The names, the relative path without the file extension of all templates in all subdirectories are listed. Only json, yml, and yaml extensions are supported.\n\nWhen filtering the list with a pattern, only simple patterns similar to a shell glob are accepted.\n\n`*` - Matches any string of characters\n\n`**` - Matches any path\n\n`?` - Matches any one character\n\n`[set]` - Matches any one character in the set\n\n`{p,q}` - Matches either literal p or q\n\n`\\` - Escapes the next pattern character", "examples": "Listing all templates:\ntemplate list\n\nListing all templates in a subdirectory that start with \"webapp\":\ntemplate list \"apps/warehouse/webapp*\"\n"}, "stack-list": {"executable": "/home/bundle/cog-command", "options": {"filter": {"short_flag": "f", "required": false, "type": "list", "description": "Filter results based on a filter string. Acceptable filter strings are listed in the description. Can be specified more than once. Defaults to 'ACTIVE'."}}, "description": "Lists stack summaries.", "rules": ["when command is cfn:stack-list must have cfn:stack"], "long_description": "Lists stack summaries.\n\nThe filter string can be one or more cloudformation stack status strings which include:\n\nCREATE_IN_PROGRESS, CREATE_FAILED, CREATE_COMPLETE, ROLLBACK_IN_PROGRESS, ROLLBACK_FAILED, ROLLBACK_COMPLETE, DELETE_IN_PROGRESS, DELETE_FAILED, DELETE_COMPLETE, UPDATE_IN_PROGRESS, UPDATE_COMPLETE_CLEANUP_IN_PROGRESS, UPDATE_COMPLETE, UPDATE_ROLLBACK_IN_PROGRESS, UPDATE_ROLLBACK_FAILED, UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS, UPDATE_ROLLBACK_COMPLETE\n\nAdditionally a few special filter strings that correspond to a subset of the standard filter strings may be used:\n\nACTIVE, COMPLETE, FAILED, DELETED, IN_PROGRESS", "examples": "Listing all stacks:\nstack list\n\nListing all stacks that have failed:\nstack list -f FAILED\n"}, "changeset-list": {"rules": ["when command is cfn:changeset-list must have cfn:changeset"], "executable": "/home/bundle/cog-command", "description": "Lists cloudformation changesets.", "arguments": "<stack-name>"}, "changeset-delete": {"rules": ["when command is cfn:changeset-delete must have cfn:changeset"], "executable": "/home/bundle/cog-command", "description": "Deletes cloudformation changesets.", "arguments": "<changeset-name> <stack-name>"}, "stack-delete": {"rules": ["when command is cfn:stack-delete must have cfn:stack"], "executable": "/home/bundle/cog-command", "description": "Deletes a stack.", "arguments": "<stack-name>"}, "changeset-create": {"rules": ["when command is cfn:changeset-create must have cfn:changeset"], "arguments": "<stack-name>", "executable": "/home/bundle/cog-command", "options": {"definition": {"short_flag": "d", "required": false, "type": "string", "description": "Name of a definition to use as default values for updating the stack."}, "description": {"short_flag": "D", "required": false, "type": "string", "description": "A description to help you identify this change set. "}, "param": {"short_flag": "p", "required": false, "type": "list", "description": "Parameter, specified as 'key=value', that specify input parameters for the change set. Can be specified multiple times."}, "sha": {"short_flag": "s", "required": false, "type": "string", "description": "Git commit SHA from which to read definitions."}, "tag": {"short_flag": "t", "required": false, "type": "list", "description": "Key-value pairs, specified as 'key=value', to associate with this stack."}, "template_url": {"short_flag": "T", "required": false, "type": "string", "description": "URL for updated CloudFormation template."}, "notify": {"short_flag": "n", "required": false, "type": "list", "description": "The Amazon Resource Names (ARNs) of Amazon Simple Notification Service (Amazon SNS) topics that AWS CloudFormation associates with the stack."}, "branch": {"short_flag": "b", "required": false, "type": "string", "description": "Branch from which to read definitions. Defaults to master."}, "changeset-name": {"required": false, "type": "string", "description": "The name of your changeset. Defaults to 'changeset<num>'"}, "capabilities": {"short_flag": "c", "required": false, "type": "list", "description": "Can be one of: iam or named_iam."}}, "description": "Creates a changeset for a stack."}, "definition-show": {"executable": "/home/bundle/cog-command", "options": {"sha": {"short_flag": "s", "required": false, "type": "string", "description": "Git commit SHA in which to find the definition."}, "tag": {"short_flag": "t", "required": false, "type": "string", "description": "Tag in which to find the definition."}, "branch": {"short_flag": "b", "required": false, "type": "string", "description": "Branch in which to find the definition. Defaults to master."}}, "description": "Shows contents of a definition.", "rules": ["when command is cfn:definition-show must have cfn:definition-show"], "arguments": "<name>", "long_description": "The most recently created stack definition with the name specified is found and returned as json. Keys `params` and `tags` are formatted to be used in a pipeline. See examples for usage.", "examples": "Show a definition:\ndefinition show webapp\n\nShow a definition and use it in a pipeline with `stack-create`:\ndefinition show webapp3 | stack create $name $template_url -p $params -t $tags -p \"SshKey=web-team\"\n"}, "stack-events": {"rules": ["when command is cfn:stack-events must have cfn:stack"], "arguments": "<stack-name>", "executable": "/home/bundle/cog-command", "options": {"page": {"short_flag": "p", "required": false, "type": "int", "description": "Events are paginated 10 per page. This option allows you to view a specific page."}}, "description": "Lists events for a stack. Returns all stack related events for a specified stack in reverse chronological order."}, "definition-list": {"executable": "/home/bundle/cog-command", "options": {"sha": {"short_flag": "s", "required": false, "type": "string", "description": "Git commit SHA from which to list definitions."}, "tag": {"short_flag": "t", "required": false, "type": "string", "description": "Tag from which to list definitions."}, "branch": {"short_flag": "b", "required": false, "type": "string", "description": "Branch from which to list definitions. Defaults to master."}}, "description": "Lists all definitions, filtered by an optional glob pattern.", "rules": ["when command is cfn:definition-list allow"], "arguments": "[pattern]", "long_description": "The names of each definition are listed.\n\nWhen filtering the list with a pattern, only simple patterns similar to a shell glob are accepted.\n\n`*` - Matches any string of characters\n\n`?` - Matches any one character\n\n`[set]` - Matches any one character in the set\n\n`{p,q}` - Matches either literal p or q\n\n`\\` - Escapes the next pattern character\n", "examples": "Listing all definitions:\ndefinition list\n\nListing all definitions that start with \"webapp\":\ndefinition list \"webapp*\"\n"}, "stack-resources": {"rules": ["when command is cfn:stack-resources must have cfn:stack"], "arguments": "<stack-name>", "executable": "/home/bundle/cog-command", "options": {"page": {"short_flag": "p", "required": false, "type": "int", "description": "Resources are paginated 10 per page. This option allows you to view a specific page."}}, "description": "Lists stack resources."}, "template-show": {"executable": "/home/bundle/cog-command", "options": {"s3": {"required": false, "type": "bool", "description": "Show template from an S3 URL instead of Git. <name> should be the URL."}, "sha": {"short_flag": "s", "required": false, "type": "string", "description": "Git commit SHA in which to find the template."}, "tag": {"short_flag": "t", "required": false, "type": "string", "description": "Tag in which to find the template."}, "branch": {"short_flag": "b", "required": false, "type": "string", "description": "Branch in which to find the template. Defaults to master."}}, "description": "Shows contents of a template.", "rules": ["when command is cfn:template-show must have cfn:template-show"], "arguments": "<name>", "long_description": "Templates can either be shown by passing the name of the template or the full url if the `--s3` option is specified. When showing a template by name, the relative path without the file extension is used. Only json, yml, and yaml extensions are supported.", "examples": "Showing a template by name:\ntemplate show webapp\n\nShowing a template in a subdirectory:\ntemplate show apps/warehouse/web\n\nShow a template on a branch by name:\ntemplate show -b staging webapp\n\nShowing a template by S3 url:\ntemplate show --s3 https://s3.amazonaws.com/bucket/prefix/definitions/webapp/127471284811/template.yml\n"}, "stack-show": {"rules": ["when command is cfn:stack-show must have cfn:stack"], "executable": "/home/bundle/cog-command", "description": "Shows details for a stack.", "arguments": "<stack-name>"}, "defaults-create": {"executable": "/home/bundle/cog-command", "options": {"params": {"short_flag": "p", "required": false, "type": "list", "description": "Parameters to include in the defaults file. These should be provided as `<key>=<value>` strings."}, "branch": {"short_flag": "b", "required": false, "type": "string", "description": "Branch of which to commit the new defaults file. Defaults to master."}, "tags": {"short_flag": "t", "required": false, "type": "list", "description": "Tags to include in the defaults file. These should be provided as `<key>=<value>` strings."}}, "description": "Creates a new defaults file.", "rules": ["when command is cfn:defaults-create must have cfn:defaults-create"], "arguments": "<name>", "long_description": "Defaults are named sets of parameters and tags applied to templates when creating a stack. Creating a few defaults file stores the parameters and tags provided as previous command input as JSON in the specified git repository. When specifying params and tags from the previous command and via options, options are merged on top of the previous command output, overriding them.", "examples": "Create a defaults file with parameters and tags:\ndefaults create staging -p \"Port=80\" -t \"Env=staging\"\n\nCreate a defaults file from a previous command's output:\nseed '{ \"params\": { \"Port\": \"80\" }, \"tags\": { \"Env\": \"staging\" } }' | defaults create staging\n"}, "stack-create": {"executable": "/home/bundle/cog-command", "options": {"definition": {"short_flag": "d", "required": false, "type": "string", "description": "Name of a definition to use as default values for stack creation."}, "branch": {"short_flag": "b", "required": false, "type": "string", "description": "Branch from which to read definitions. Defaults to master."}, "param": {"short_flag": "p", "required": false, "type": "list", "description": "Key-value pairs specified as 'key=value', that specify input parameters for your stack. Can be specified multiple times."}, "sha": {"short_flag": "s", "required": false, "type": "string", "description": "Git commit SHA from which to read definitions."}, "tag": {"short_flag": "t", "required": false, "type": "list", "description": "Key-value pairs to associate with this stack. Can be specified multiple times."}, "notify": {"short_flag": "n", "required": false, "type": "list", "description": "The Simple Notification Service (SNS) topic ARNs to publish stack related events. Can be specified multiple times."}, "timeout": {"short_flag": "e", "required": false, "type": "int", "description": "The amount of time, specified in minutes, that can pass before the stack status becomes CREATE_FAILED."}, "policy": {"short_flag": "o", "required": false, "type": "string", "description": "Stack policy name."}, "on-failure": {"short_flag": "f", "required": false, "type": "string", "description": "Determines what action will be taken if stack creation fails. Can be one of: rollback, delete or keep."}, "capabilities": {"short_flag": "c", "required": false, "type": "list", "description": "Can be one of: iam or named_iam."}}, "description": "Creates a new stack based on an existing template and returns the newly created stack.", "rules": ["when command is cfn:stack-create must have cfn:stack"], "arguments": "<stack-name> <template-url> | [<stack-name>] --definition <definition-name>", "long_description": "Although this command can be used on it's own to fully define and create a stack with a template url just as you would with the AWS CLI tool, it is  entended to be used with a stack definition. This can be accomplished by first creating a stack definition (see `definition-create`) and then either defining that definition by name with the `--definition` option, or by piping that definition to the `stack-create` command and binding options and arguments to variables.", "examples": "Creating a stack from a definition with a single parameter:\nstack create webapp3 -d webapp -p \"SshKey=web-team\"\n\nCreating a stack with a definition in a pipeline:\ndefinition show webapp3 | stack create $name $template_url -p $params -t $tags -p \"SshKey=web-team\"\n\nCreating a stack without a definition:\nstack create webapp3 https://s3.amazonaws.com/bucket/webapp3.yml -p \"SshKey=web-team\" -p \"Port=8080\" -t \"Name=webapp3\"\n"}, "defaults-list": {"executable": "/home/bundle/cog-command", "options": {"sha": {"short_flag": "s", "required": false, "type": "string", "description": "Git commit SHA from which to list defaults files."}, "tag": {"short_flag": "t", "required": false, "type": "string", "description": "Tag from which to list defaults files."}, "branch": {"short_flag": "b", "required": false, "type": "string", "description": "Branch from which to list defaults files. Defaults to master."}}, "description": "Lists all defaults files, filtered by an optional glob pattern.", "rules": ["when command is cfn:defaults-list allow"], "arguments": "[pattern]", "long_description": "The names of each defaults file are listed.\n\nWhen filtering the list with a pattern, only simple patterns similar to a shell glob are accepted.\n\n`*` - Matches any string of characters\n\n`?` - Matches any one character\n\n`[set]` - Matches any one character in the set\n\n`{p,q}` - Matches either literal p or q\n\n`\\` - Escapes the next pattern character\n", "examples": "Listing all defaults files:\ndefaults list\n\nListing all defaults files that start with \"webapp\":\ndefaults list \"webapp*\"\n"}, "defaults-show": {"executable": "/home/bundle/cog-command", "options": {"sha": {"short_flag": "s", "required": false, "type": "string", "description": "Git commit SHA in which to find the defaults file."}, "tag": {"short_flag": "t", "required": false, "type": "string", "description": "Tag in which to find the defaults file."}, "branch": {"short_flag": "b", "required": false, "type": "string", "description": "Branch in which to find the defaults file. Defaults to master."}}, "description": "Shows contents of a defaults file.", "rules": ["when command is cfn:defaults-show must have cfn:defaults-show"], "arguments": "<name>", "long_description": "The name and the parsed JSON data are returned for use in other pipelines or for viewing in chat.", "examples": "Show a defaults file:\ndefaults show staging\n"}, "changeset-show": {"rules": ["when command is cfn:changeset-show must have cfn:changeset"], "executable": "/home/bundle/cog-command", "description": "Shows a cloudformation changeset.", "arguments": "<changeset-name> <stack-name>"}, "check-setup": {"rules": ["when command is cfn:check-setup allow"], "executable": "/home/bundle/cog-command", "description": "Checks that all configuration is set correctly", "long_description": "This command is meant to be a sanity check for users once they have installed and configured the bundle. It will inspect provided environment variables and try to make sure that the accounts used have all the necessary permissions."}}, "description": "AWS CloudFormation", "author": "Operable <support@operable.io>", "homepage": "https://github.com/cogcmd/aws-cfn", "name": "cfn", "version": "0.5.0", "docker": {"image": "cogcmd/aws-cfn", "tag": "0.5.0"}, "cog_bundle_version": 4, "config": {"notes": "This bundle requires access to an Amazon Web Services account and a Git repository. Detailed instructions for configuring this access are\navailable in the README in the GitHub repository located at the URL specified in the **Homepage** section below.\n", "env": [{"var": "AWS_ACCESS_KEY_ID", "description": "ID of the access key used to authenticate with the AWS API. Required if IAM instance metadata not used."}, {"var": "AWS_SECRET_ACCESS_KEY", "description": "Secret of the access key used to authenticate with the AWS API. Required if IAM instance metadata not used."}, {"var": "AWS_REGION", "description": "Optional region used for all commands"}, {"var": "AWS_STS_ROLE_ARN", "description": "Optional STS role ARN of which to assume when making requests to the AWS API."}, {"var": "S3_STACK_DEFINITON_BUCKET", "description": "Required bucket name where created definitions will be written and read from when used to create stacks."}, {"var": "S3_STACK_DEFINITON_PREFIX", "description": "Optional bucket key prefix to use when storing definitions in a shared bucket."}, {"var": "GIT_REMOTE_URL", "description": "Url of git repository used to read and write defaults files, templates, and definitions."}, {"var": "GIT_SSH_KEY", "description": "SSH key used to authenticate with the above git repository. Must have read and write access."}]}, "long_description": "This bundle provides an opinioned interface to CloudFormation's raw capabilities, not just to make it easier to use but, easier to use well. Commands to perform all basic CloudFormation actions, such as creating and listing stacks, are available, as you would expect. But, we've also built a set of commands for managing a new concept, stack definitions.\n\nStack definitions are a layer on top of CloudFormation templates aimed at making them more reusable and easier to work with as a team. They're comprised of a defaults file, which is a named set of CloudFormation paramters and tags, a named CloudFormation template, and a set of overrides. All of these layers are merged together to make up all the inputs required to create a stack.\n\nBecause most engineering and operations teams require a canonical version of their infrastructure definitions to be stored in a VCS repository, templates, defaults files, and stack definitions will be stored in a git repository. Doing so supports several common use cases such as debugging and auditing.\n\nPutting this all together results in a reusable, repeatable workflow that can easily be executed from chat, while still allowing basic CloudFormation actions when necessary.\n", "permissions": ["cfn:stack", "cfn:changeset", "cfn:template-show", "cfn:defaults-create", "cfn:defaults-show", "cfn:definition-create", "cfn:definition-show"]}