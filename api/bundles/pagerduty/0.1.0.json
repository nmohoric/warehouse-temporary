{"templates": {"oncall": {"body": "~each var=$results~\n| ~$item.name~ |\n| --- |\n~each var=$item.oncall~\n| ~$item.name~ <<~$item.email~>> |\n~end~\n~br~\n~end~\n"}, "incidents": {"body": "| Service | Status | Subject | URL |\n| ------- | ------ | ------- | --- |\n~each var=$results~\n| ~$item.service.name~ | ~$item.status~ | ~$item.summary.subject~ | ~$item.url~ |\n~end~\n"}}, "commands": {"ack": {"executable": "/home/bundle/cog-command", "options": {"as": {"short_flag": "a", "required": false, "type": "string", "description": "The email of a PagerDuty user"}}, "description": "Acknowledge incidents", "rules": ["must have pagerduty:write"], "long_description": "Returns confirmation of acknowledgement\n\nRequires the following environment variables:\n\n  PAGERDUTY_ACCOUNT_SUBDOMAIN\n  PAGERDUTY_ACCOUNT_TOKEN\n\nBehavior is configured by the following environment variables:\n\n  PAGERDUTY_DEFAULT_EMAIL\n    The default pagerduty email to acknowledge incidents as\n\n  PAGERDUTY_EMAIL_FOR_<COG_USER>\n    Used to map cog users to pagerduty emails\n\nAn email mapping to a pagerduty account is required in order to\nack incidents. If the '--as' option has been specified then that\nemail will be used. If not this command will first look for an\nenvironment variable in the form of\n'PAGERDUTY_EMAIL_FOR_<COG_USER>', so if your user name is 'bob',\nthe env var will be 'PAGERDUTY_EMAIL_FOR_BOB', and use that email\nto acknowledge the incident. If that fails it will try\n'PAGERDUTY_DEFAULT_EMAIL' If none of those vars are specified and\nthe '--as' option is not passed, the command will fail.\n", "arguments": "<incident-id>"}, "oncall": {"rules": ["allow"], "executable": "/home/bundle/cog-command", "long_description": "Requires the following environment variables:\n\n  PAGERDUTY_ACCOUNT_SUBDOMAIN\n  PAGERDUTY_ACCOUNT_TOKEN\n", "arguments": "[service]", "description": "Find out who is on-call for all services, or for a specific service"}, "resolve": {"executable": "/home/bundle/cog-command", "options": {"as": {"short_flag": "a", "required": false, "type": "string", "description": "The email of a PagerDuty user"}}, "description": "Resolve incidents", "rules": ["must have pagerduty:write"], "long_description": "Returns confirmation of resolution\n\nRequires the following environment variables:\n\n  PAGERDUTY_ACCOUNT_SUBDOMAIN\n  PAGERDUTY_ACCOUNT_TOKEN\n\nBehavior is configured by the following environment variables:\n\n  PAGERDUTY_DEFAULT_EMAIL\n    The default pagerduty email to acknowledge incidents as\n\n  PAGERDUTY_EMAIL_FOR_<COG_USER>\n    Used to map cog users to pagerduty emails\n\nAn email mapping to a pagerduty account is required in order to\nresolve incidents. If the '--as' option has been specified then\nthat email will be used. If not this command will first look for\nan environment variable in the form of\n'PAGERDUTY_EMAIL_FOR_<COG_USER>', so if your user name is 'bob'\nthe env var will be 'PAGERDUTY_EMAIL_FOR_BOB', and use that email\nto acknowledge the incident. If that fails it will try\n'PAGERDUTY_DEFAULT_EMAIL' If none of those vars are specified and\nthe '--as' option is not passed, the command will fail.\n", "arguments": "<incident-id>"}, "incidents": {"rules": ["must have pagerduty:read"], "executable": "/home/bundle/cog-command", "long_description": "Retrieves incidents matching the specified option. By default,\nonly returns triggered incidents.\n\nRequires the following environment variables:\n\n  PAGERDUTY_ACCOUNT_SUBDOMAIN\n  PAGERDUTY_ACCOUNT_TOKEN\n", "options": {"resolved": {"short_flag": "r", "required": false, "type": "bool"}, "limit": {"short_flag": "l", "required": false, "type": "int"}, "acked": {"short_flag": "a", "required": false, "type": "bool"}, "triggered": {"short_flag": "t", "required": false, "type": "bool"}}, "description": "List incidents"}, "alert": {"executable": "/home/bundle/cog-command", "description": "Trigger alerts", "rules": ["must have pagerduty:alert"], "notes": "If no service is passed and the default service key is not set, the command will fail.", "long_description": "Returns a confirmation message on success\n\nRequires the following environment variables:\n\n  PAGERDUTY_ACCOUNT_SUBDOMAIN\n  PAGERDUTY_ACCOUNT_TOKEN\n\nBehavior is configured by the following environment variables:\n\n  PAGERDUTY_DEFAULT_SERVICE_KEY\n    If no service is passed, this is the id of the service to use.\n", "options": {"service": {"short_flag": "s", "required": false, "type": "string"}}, "arguments": "<message>"}}, "description": "Interact with pagerduty", "author": "Matthew Peck <matt@operable.io>", "name": "pagerduty", "version": "0.1.0", "docker": {"image": "cogcmd/pagerduty", "tag": "0.1.0"}, "cog_bundle_version": 4, "homepage": "https://github.com/cogcmd/pagerduty", "long_description": "The pagerduty bundle can be configured with a few env vars. All\ncommands require PAGERDUTY_ACCOUNT_SUBDOMAIN and\nPAGERDUTY_ACCOUNT_TOKEN to be set.  That would be the subdomain for\nyour PagerDuty account and the V1 API token respectively.\n\nThe alert command has an optional var, PAGERDUTY_DEFAULT_SERVICE_KEY.\nThis is the integration key found on the integration tab for the\nservice on PagerDuty's web UI. If set, any alerts that don't specify a\nservice will be sent here. Note that if the service key is not set or\na service isn't passed to the command, it will fail.\n\nCommands ack and resolve have a couple extra vars.\nPAGERDUTY_DEFAULT_EMAIL, similar to PAGERDUTY_DEFAULT_SERVICE_KEY,\nwill be used as the requester when acking or resolving incidents.\nAdditionally, you may attach the requester to cog accounts. Using vars\nin the form, PAGERDUTY_EMAIL_FOR_<COG_USER> you can specify which\nPagerDuty email is associated with which Cog user.  So for example, if\nyour Cog username is 'bob', you would set the var\nPAGERDUTY_EMAIL_FOR_BOB. Then whenever you ack or resolve the proper\nPagerDuty account is associated with the action.\n", "permissions": ["pagerduty:read", "pagerduty:write", "pagerduty:alert"]}