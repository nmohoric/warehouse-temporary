{"templates": {"instance_reboot": {"body": "~each var=$results as=instance~\nRebooted instance ~$instance.instance_id~\n~end~\n"}, "instance_tag": {"body": "~each var=$results as=instance~\n~each var=$instance.tags as=tag~\nTagged instance ~$instance.instance_id~ with ~$tag.key~=~$tag.value~\n~end~\n~end~\n"}, "keypair_list": {"body": "| Key Name | Fingerprint |\n| -------- | ----------- |\n~each var=$results as=keypair~\n| ~$keypair.key_name~ | ~$keypair.key_fingerprint~ |\n~end~\n"}, "instance_list": {"body": "~each var=$results as=instance~\n~attachment color=$instance.state.color~\n~if cond=$instance.tags.Name bound?~**Instance Name:** ~$instance.tags.Name~\n~end~\n**Instance ID:** ~$instance.instance_id~\n**Instance Type:** ~$instance.instance_type~\n**Availability Zone:** ~$instance.placement.availability_zone~\n**Instance State:** ~$instance.state.name~\n**Public DNS:** ~$instance.public_dns_name~\n**Public IP:** ~$instance.public_ip_address~\n**Key Name** ~$instance.key_name~\n**Launch Time** ~$instance.launch_time~\n~end~\n~end~\n"}, "instance_stop": {"body": "~each var=$results as=instance~\nStopped instance ~$instance.instance_id~\n~end~\n"}, "vpc_list": {"body": "~each var=$results as=vpc~\n~attachment color=$vpc.state.color~\n~if cond=$instance.tags.Name bound?~**VPC Name:** ~$vpc.tags.Name~\n~end~\n**VPC ID:** ~$vpc.vpc_id~\n**VPC State:** ~$vpc.state.name~\n**VPC CIDR:** ~$vpc.cidr_block~\n**DHCP Options Set:** ~$vpc.dhcp_options_id~\n**Tenancy:** ~$vpc.instance_tenancy~\n**Default VPC:** ~$vpc.is_default~\n~end~\n~end~\n"}, "instance_destroy": {"body": "~each var=$results as=instance~\nDestroyed instance ~$instance.instance_id~\n~end~\n"}, "instance_start": {"body": "~each var=$results as=instance~\nStarted instance ~$instance.instance_id~\n~end~\n"}}, "commands": {"instance-start": {"rules": ["when command is ec2:instance-start must have ec2:write"], "arguments": "<instance-id> [<instance-id> ...]", "executable": "/home/bundle/cog-command", "options": {"region": {"short_flag": "r", "required": false, "type": "string", "description": "EC2 location to connect to (us-east-1, us-west-2, us-west-1, eu-west-1, eu-central-1, ap-southeast-1, ap-northeast-1, ap-southeast-2, ap-northeast-2, ap-south-1, sa-east-1)"}}, "description": "Starts existing instances"}, "instance-search": {"executable": "/home/bundle/cog-command", "description": "Searches instances with matching attributes", "rules": ["when command is ec2:instance-search must have ec2:read"], "arguments": "[<filter> ...]", "long_description": "Applies filters to all the instances in the specified (or default) region. Filters are defined as arguments matching the pattern <key>=<value> where <key> is the name of the attribute of the instance and <value> is value of that attribute to match against. If multiple filters are provided, filters with the same key are ORed together while all other filters are ANDed together.\n", "options": {"region": {"short_flag": "r", "required": false, "type": "string", "description": "EC2 location to connect to (us-east-1, us-west-2, us-west-1, eu-west-1, eu-central-1, ap-southeast-1, ap-northeast-1, ap-southeast-2, ap-northeast-2, ap-south-1, sa-east-1)"}}, "examples": "Finding instances of type t2.small in either the running or pending state:\n\n```\nec2:instance-search \"instance-type=t2.small\" \"instance-state-name=running\" \"instance-state-name=pending\"```\n\nFinding an instance by id:\n\n```\nec2:instance-search \"instance-id=i-191ea1bc\"```\n"}, "instance-stop": {"rules": ["when command is ec2:instance-stop must have ec2:write"], "arguments": "<instance-id> [<instance-id> ...]", "executable": "/home/bundle/cog-command", "options": {"region": {"short_flag": "r", "required": false, "type": "string", "description": "EC2 location to connect to (us-east-1, us-west-2, us-west-1, eu-west-1, eu-central-1, ap-southeast-1, ap-northeast-1, ap-southeast-2, ap-northeast-2, ap-south-1, sa-east-1)"}, "force": {"short_flag": "f", "required": false, "type": "bool", "description": "Forces an instance to stop immediately. File system caches and metadata are not flushed."}}, "description": "Stops instances"}, "instance-destroy": {"executable": "/home/bundle/cog-command", "options": {"region": {"short_flag": "r", "required": false, "type": "string", "description": "EC2 location to connect to (us-east-1, us-west-2, us-west-1, eu-west-1, eu-central-1, ap-southeast-1, ap-northeast-1, ap-southeast-2, ap-northeast-2, ap-south-1, sa-east-1)"}}, "description": "Destroys existing instances", "rules": ["when command is ec2:instance-destroy must have ec2:admin"], "long_description": "Shuts down and removes instances. This operation will succeed even if the instance is already being terminated. Terminated instances will also remain in results from ec2:instance-list for about and hour, but their state will be set to terminated.\n", "arguments": "<instance-id> [<instance-id> ...]"}, "instance-list": {"rules": ["when command is ec2:instance-list must have ec2:read"], "executable": "/home/bundle/cog-command", "long_description": "Returns attributes of all instances in the specified (or default) region. If you want to search for a specific instance or set of instances see the `ec2:instance-search` command. When viewing the results in Slack, the template will use an attachment color representing the current state of each instance similar to the state badges in the AWS console.\n", "options": {"region": {"short_flag": "r", "required": false, "type": "string", "description": "EC2 location to connect to (us-east-1, us-west-2, us-west-1, eu-west-1, eu-central-1, ap-southeast-1, ap-northeast-1, ap-southeast-2, ap-northeast-2, ap-south-1, sa-east-1)"}}, "description": "Lists instances"}, "keypair-list": {"rules": ["when command is ec2:keypair-list must have ec2:read"], "executable": "/home/bundle/cog-command", "description": "Lists keypairs", "options": {"region": {"short_flag": "r", "required": false, "type": "string", "description": "EC2 location to connect to (us-east-1, us-west-2, us-west-1, eu-west-1, eu-central-1, ap-southeast-1, ap-northeast-1, ap-southeast-2, ap-northeast-2, ap-south-1, sa-east-1)"}}}, "instance-create": {"executable": "/home/bundle/cog-command", "options": {"count": {"short_flag": "c", "required": false, "type": "int", "description": "Number of instances to create. Defaults to 1"}, "tags": {"short_flag": "t", "required": false, "type": "string", "description": "Tags to assign Defined with the following pattern <key>=<value>."}, "region": {"short_flag": "r", "required": false, "type": "string", "description": "EC2 location to connect to (us-east-1, us-west-2, us-west-1, eu-west-1, eu-central-1, ap-southeast-1, ap-northeast-1, ap-southeast-2, ap-northeast-2, ap-south-1, sa-east-1)"}, "subnet-id": {"short_flag": "s", "required": false, "type": "string", "description": "ID of the subnet. Used within a VPC."}, "key-name": {"short_flag": "k", "required": false, "type": "string", "description": "Name of the key pair."}, "image-id": {"short_flag": "i", "required": true, "type": "string", "description": "ID of the AMI. Run ec2:image-list for list of available AMIs."}, "instance-type": {"short_flag": "m", "required": false, "type": "string", "description": "Type of instance. Defaults to m1.small. Available types: t1.micro, t2.nano, t2.micro, t2.small, t2.medium, t2.large, m1.small, m1.medium, m1.large, m1.xlarge, m3.medium, m3.large, m3.xlarge, m3.2xlarge, m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge, m4.16xlarge, m2.xlarge, m2.2xlarge, m2.4xlarge, cr1.8xlarge, r3.large, r3.xlarge, r3.2xlarge, r3.4xlarge, r3.8xlarge, x1.16xlarge, x1.32xlarge, i2.xlarge, i2.2xlarge, i2.4xlarge, i2.8xlarge, hi1.4xlarge, hs1.8xlarge, c1.medium, c1.xlarge, c3.large, c3.xlarge, c3.2xlarge, c3.4xlarge, c3.8xlarge, c4.large, c4.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge, cc1.4xlarge, cc2.8xlarge, g2.2xlarge, g2.8xlarge, cg1.4xlarge, p2.xlarge, p2.8xlarge, p2.16xlarge, d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge."}, "availability-zone": {"short_flag": "z", "required": false, "type": "string", "description": "Availbility Zone inside the region specified."}}, "description": "Creates instances", "rules": ["when command is ec2:instance-create must have ec2:write"], "long_description": "Creates and starts an EC2 instance with the given image id. You'll most likely need to set the image id, subnet id, instance type and keypair for most invocations. Also, setting a Name tag so the instance can easily be identified in the AWS console is recommended.\n", "examples": "Creating a simple instance:\n\n```\nec2:instance-create -i ami-d481fad3 -s subnet-f365e3aa -m t2.nano -k production-key```\n\nCreating an instance with tags (with basic flags above omitted):\n\n```\nec2:instance-create -t \"Name=super-server\" -t \"Color=red\"```\n"}, "vpc-list": {"rules": ["when command is ec2:vpc-list must have ec2:read"], "executable": "/home/bundle/cog-command", "description": "Lists VPCs", "options": {"region": {"short_flag": "r", "required": false, "type": "string", "description": "EC2 location to connect to (us-east-1, us-west-2, us-west-1, eu-west-1, eu-central-1, ap-southeast-1, ap-northeast-1, ap-southeast-2, ap-northeast-2, ap-south-1, sa-east-1)"}}}, "instance-tag": {"executable": "/home/bundle/cog-command", "description": "Tags an instance", "rules": ["when command is ec2:instance-tag must have ec2:write"], "arguments": "<instance-id> <tag> [<tag> ..]", "long_description": "Adds tags to an instance. One or more tags can be included as arguments after the instance id. Each tag should be in the format <key>=<value>. Because tag names are unique per resource, providing a tag that already exists will overwrite the existing tag value. To avoid any parsing errors wrapping each tag argument in quotes is recommended.\n", "options": {"region": {"short_flag": "r", "required": false, "type": "string", "description": "EC2 location to connect to (us-east-1, us-west-2, us-west-1, eu-west-1, eu-central-1, ap-southeast-1, ap-northeast-1, ap-southeast-2, ap-northeast-2, ap-south-1, sa-east-1)"}}, "examples": "Setting a few tags:\n\n```\nec2:instance-tag i-191ea1bc \"Erlang=R19B1\" \"Elixir=1.3.4\"```\n\nUpdating an existing tag:\n\n```\nec2:instance-tag i-191ea1bc \"Name=New Fancy Server\"```\n"}, "instance-reboot": {"rules": ["when command is ec2:instance-reboot must have ec2:write"], "arguments": "<instance-id> [<instance-id> ...]", "executable": "/home/bundle/cog-command", "options": {"region": {"short_flag": "r", "required": false, "type": "string", "description": "EC2 location to connect to (us-east-1, us-west-2, us-west-1, eu-west-1, eu-central-1, ap-southeast-1, ap-northeast-1, ap-southeast-2, ap-northeast-2, ap-south-1, sa-east-1)"}}, "description": "Reboots instances"}}, "description": "Manage EC2 instances and related services", "author": "Patrick Van Stee <patrick@operable.io>", "config": {"notes": "When creating the access key for use with the following environment variables, make sure the IAM user that owns the key has the AmazonEC2FullAccess policy.\n", "env": [{"var": "AWS_ACCESS_KEY_ID", "description": "Requried ID of the access key used to authenticate with the AWS API"}, {"var": "AWS_SECRET_ACCESS_KEY", "description": "Required secret of the access key used to authenticate with the AWS API"}, {"var": "AWS_REGION", "description": "Optional region used for all commands unless one is provided via the -r,--region flag"}, {"var": "AWS_STS_ROLE_ARN", "description": "Optional AWS IAM role ARN to assume before interacting with the AWS APIs."}]}, "name": "ec2", "version": "0.1.2", "docker": {"image": "cogcmd/aws-ec2", "tag": "0.1.2"}, "cog_bundle_version": 4, "homepage": "https://github.com/cogcmd/aws-ec2", "long_description": "This bundle provides commands for viewing, inspecting, and controlling EC2 instances on AWS, as well as related resources. To communicate with the AWS API we use the aws-sdk library written in Ruby. Permissions are used to control which users are authorized to run each command. Listing and searching for resources requires the ec2:read permission. Modifying the state or other values of a resource requires the ec2:write permission. And, destroying an instance requires the ec2:admin permission.\n", "permissions": ["ec2:read", "ec2:write", "ec2:admin"]}